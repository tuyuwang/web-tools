---
description: 记忆规则
globs:
alwaysApply: true
---

# 记忆

## Document/memory 文件夹

- 检查 Document/memory 文件夹，如果这些文件不存在，请创建它们（整体功能和界面设计参考 @design.md 文档，进度和实施计划参考 @roadmap250417.md 文档）。如果存在，请阅读它们以了解项目背景。

Document/memory 文件夹包含必需的核心文件和可选的上下文文件，均为 Markdown 格式。文件之间以清晰的层级关系相互依存：

mermaid

flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]

    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC

    AC --> P[progress.md]


### 核心文件（必需）

1. `projectbrief.md`
   - 项目基础文档，塑造所有其他文件
   - 在项目开始时创建（如果不存在）
   - 定义核心需求和目标
   - 项目范围的真实来源

2. `productContext.md`
   - 为什么这个项目存在
   - 解决的问题
   - 应该如何工作
   - 用户体验目标

3. `activeContext.md`
   - 当前工作重点
   - 最近的变更
   - 下一步计划
   - 活跃的决策和考虑因素

4. `systemPatterns.md`
   - 系统架构
   - 关键技术决策
   - 使用中的设计模式
   - 组件关系

5. `techContext.md`
   - 使用的技术
   - 开发设置
   - 技术约束
   - 依赖关系

6. `progress.md`
   - 已经完成的功能
   - 待构建的内容
   - 当前状态
   - 已知问题

### 附加上下文
在 memory/内创建额外的文件/文件夹，帮助组织：
- 复杂功能文档
- 集成规范
- API 文档
- 测试策略
- 部署程序

## 核心工作流

### 计划模式
mermaid

flowchart TD
    Start[开始] --> ReadFiles[阅读记忆银行]
    ReadFiles --> CheckFiles{文件完整?}

    CheckFiles -->|否| Plan[创建计划]
    Plan --> Document[在聊天中记录]

    CheckFiles -->|是| Verify[验证上下文]
    Verify --> Strategy[制定策略]
    Strategy --> Present[提出方法]


### 执行模式
mermaid

flowchart TD
    Start[开始] --> Context[检查记忆银行]
    Context --> Update[更新文档]
    Update --> Rules[必要时更新 .cursor/rules]
    Rules --> Execute[执行任务]
    Execute --> Document[记录变更]


## 文档更新

记忆银行在以下情况下更新：
1. 发现新的项目模式
2. 实施重大变更后
3. 当用户使用 **update memory** 请求时（必须审查所有文件）
4. 当上下文需要澄清时

mermaid

flowchart TD
    Start[更新流程]

    subgraph Process[处理过程]
        P1[审查所有文件]
        P2[记录当前状态]
        P3[明确下一步]
        P4[更新 .cursor/rules]

        P1 --> P2 --> P3 --> P4
    end

    Start --> Process


注意：当由 **update memory** 触发时，我必须审查每个记忆银行文件，即使有些不需要更新。特别关注 activeContext.md 和 progress.md，因为它们跟踪当前状态。

## 项目智能 (.cursor/rules)

.cursor/rules 文件夹是每个项目的学习日志。它捕获重要的模式、偏好和项目智能，帮助我更有效地工作。随着与项目的合作，我将发现并记录从代码中不明显的关键见解。

mermaid

flowchart TD
    Start{发现新模式}

    subgraph Learn [学习过程]
        D1[识别模式]
        D2[与用户验证]
        D3[记录在 .cursor/rules 中]
    end

    subgraph Apply [应用]
        A1[阅读 .cursor/rules]
        A2[应用学习的模式]
        A3[改进未来工作]
    end

    Start --> Learn
    Learn --> Apply


### 需要捕获的内容
- 关键实现路径
- 用户偏好和工作流
- 项目特定模式
- 已知挑战
- 项目决策的演变
- 工具使用模式

格式灵活 - 专注于捕获有价值的见解，帮助我更有效地与项目合作。将 .cursor/rules 视为随着我们一起工作而变得更智能的活文档。

记住：每次记忆重置后，我完全重新开始。记忆银行是我与以前工作的唯一联系。它必须以精确和清晰的方式维护，因为我的有效性完全取决于其准确性。

